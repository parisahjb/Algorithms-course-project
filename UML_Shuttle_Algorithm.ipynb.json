{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Below is a 2 step selection process,\n",
      "1) Select your preference to choose between default (original 28 datapoint set) or choosing the number of patients (algorithm will randomly pick locations from the multiple locations from the csv file)\n",
      "2) If you have chosen the number of patients, there will be a prompt that will ask you to select a number between 2 and 25\n",
      "Please select your prefrence to choose the number of patients (1) or default (0):0\n",
      "Using license file /Users/naman/gurobi.lic\n",
      "Academic license - for non-commercial use only - expires 2021-01-05\n",
      "Gurobi Optimizer version 9.1.0 build v9.1.0rc0 (mac64)\n",
      "Thread count: 2 physical cores, 4 logical processors, using up to 4 threads\n",
      "Optimize a model with 1846 rows, 1678 columns and 12354 nonzeros\n",
      "Model fingerprint: 0x5a5379fe\n",
      "Variable types: 0 continuous, 1678 integer (1622 binary)\n",
      "Coefficient statistics:\n",
      "  Matrix range     [1e+00, 1e+03]\n",
      "  Objective range  [1e-03, 2e+01]\n",
      "  Bounds range     [1e+00, 1e+00]\n",
      "  RHS range        [1e+00, 1e+03]\n",
      "Presolve removed 228 rows and 141 columns\n",
      "Presolve time: 0.08s\n",
      "Presolved: 1618 rows, 1537 columns, 7486 nonzeros\n",
      "Variable types: 0 continuous, 1537 integer (1483 binary)\n",
      "\n",
      "Root relaxation: objective 4.779967e+01, 164 iterations, 0.00 seconds\n",
      "\n",
      "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
      " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
      "\n",
      "     0     0   47.79967    0   74          -   47.79967      -     -    0s\n",
      "     0     0   47.80761    0   98          -   47.80761      -     -    0s\n",
      "     0     0   50.74740    0  103          -   50.74740      -     -    0s\n",
      "     0     0   51.43532    0   92          -   51.43532      -     -    0s\n",
      "     0     0   51.43532    0   84          -   51.43532      -     -    0s\n",
      "     0     0   51.44032    0  102          -   51.44032      -     -    0s\n",
      "     0     0   51.44032    0   94          -   51.44032      -     -    0s\n",
      "     0     0   51.44182    0  118          -   51.44182      -     -    0s\n",
      "     0     0   51.44232    0  110          -   51.44232      -     -    0s\n",
      "     0     0   51.44233    0  126          -   51.44233      -     -    0s\n",
      "     0     0   51.44233    0  126          -   51.44233      -     -    1s\n",
      "     0     2   51.44333    0  126          -   51.44333      -     -    1s\n",
      "*  198   148              67     100.7970762   51.44562  49.0%   8.2    1s\n",
      "H  200   132                      89.9032328   51.44562  42.8%   8.2    1s\n",
      "H  233   161                      86.5001238   51.44562  40.5%   8.2    1s\n",
      "H  473   404                      85.0847076   51.44562  39.5%   7.4    2s\n",
      "H  487   392                      82.8028480   51.44562  37.9%   7.3    2s\n",
      "\n",
      "Cutting planes:\n",
      "  Learned: 20\n",
      "  Gomory: 15\n",
      "  Implied bound: 3\n",
      "  Clique: 6\n",
      "  MIR: 3\n",
      "  Flow cover: 45\n",
      "  Zero half: 24\n",
      "  Relax-and-lift: 9\n",
      "\n",
      "Explored 765 nodes (6713 simplex iterations) in 4.97 seconds\n",
      "Thread count was 4 (of 4 available processors)\n",
      "\n",
      "Solution count 5: 82.8028 85.0847 86.5001 ... 100.797\n",
      "\n",
      "Solve interrupted\n",
      "Best objective 8.280284795592e+01, best bound 5.151258118012e+01, gap 37.7889%\n",
      "patient: 3, shuttle: 1 1\n",
      "patient: 4, shuttle: 2 1\n",
      "patient: 5, shuttle: 2 1\n",
      "patient: 6, shuttle: 2 1\n",
      "patient: 7, shuttle: 2 1\n",
      "patient: 8, shuttle: 1 1\n",
      "patient: 9, shuttle: 1 1\n",
      "patient: 10, shuttle: 1 1\n",
      "patient: 11, shuttle: 2 1\n",
      "patient: 12, shuttle: 2 1\n",
      "patient: 13, shuttle: 2 1\n",
      "patient: 14, shuttle: 2 1\n",
      "patient: 15, shuttle: 2 1\n",
      "patient: 16, shuttle: 2 1\n",
      "patient: 17, shuttle: 1 1\n",
      "patient: 18, shuttle: 2 1\n",
      "patient: 19, shuttle: 2 1\n",
      "patient: 20, shuttle: 2 1\n",
      "patient: 21, shuttle: 2 1\n",
      "patient: 22, shuttle: 2 1\n",
      "patient: 23, shuttle: 2 1\n",
      "patient: 24, shuttle: 1 1\n",
      "patient: 25, shuttle: 1 1\n",
      "patient: 26, shuttle: 1 1\n",
      "patient: 27, shuttle: 2 1\n",
      "lab: 1, shuttle: 1 1\n",
      "lab: 2, shuttle: 2 1\n",
      "first_node: 0, next_node: 6, shuttle: 2 1\n",
      "first_node: 0, next_node: 25, shuttle: 1 1\n",
      "first_node: 1, next_node: 0, shuttle: 1 1\n",
      "first_node: 2, next_node: 0, shuttle: 2 1\n",
      "first_node: 3, next_node: 17, shuttle: 1 1\n",
      "first_node: 4, next_node: 21, shuttle: 2 1\n",
      "first_node: 5, next_node: 19, shuttle: 2 1\n",
      "first_node: 6, next_node: 5, shuttle: 2 1\n",
      "first_node: 7, next_node: 18, shuttle: 2 1\n",
      "first_node: 8, next_node: 3, shuttle: 1 1\n",
      "first_node: 9, next_node: 10, shuttle: 1 1\n",
      "first_node: 10, next_node: 26, shuttle: 1 1\n",
      "first_node: 11, next_node: 27, shuttle: 2 1\n",
      "first_node: 12, next_node: 11, shuttle: 2 1\n",
      "first_node: 13, next_node: 12, shuttle: 2 1\n",
      "first_node: 14, next_node: 16, shuttle: 2 1\n",
      "first_node: 15, next_node: 14, shuttle: 2 1\n",
      "first_node: 16, next_node: 13, shuttle: 2 1\n",
      "first_node: 17, next_node: 24, shuttle: 1 1\n",
      "first_node: 18, next_node: 15, shuttle: 2 1\n",
      "first_node: 19, next_node: 4, shuttle: 2 1\n",
      "first_node: 20, next_node: 2, shuttle: 2 1\n",
      "first_node: 21, next_node: 7, shuttle: 2 1\n",
      "first_node: 22, next_node: 20, shuttle: 2 1\n",
      "first_node: 23, next_node: 22, shuttle: 2 1\n",
      "first_node: 24, next_node: 1, shuttle: 1 1\n",
      "first_node: 25, next_node: 9, shuttle: 1 1\n",
      "first_node: 26, next_node: 8, shuttle: 1 1\n",
      "first_node: 27, next_node: 23, shuttle: 2 1\n",
      "w0,1 1\n",
      "w0,2 1\n",
      "w1,1 10\n",
      "w1,2 17\n",
      "w2,1 9\n",
      "w2,2 19\n",
      "w3,1 7\n",
      "w4,2 5\n",
      "w5,2 3\n",
      "w6,2 2\n",
      "w7,2 7\n",
      "w8,1 6\n",
      "w9,1 3\n",
      "w10,1 4\n",
      "w11,2 14\n",
      "w12,2 13\n",
      "w13,2 12\n",
      "w14,2 10\n",
      "w15,2 9\n",
      "w16,2 11\n",
      "w17,1 8\n",
      "w18,2 8\n",
      "w19,2 4\n",
      "w20,2 18\n",
      "w21,2 6\n",
      "w22,2 17\n",
      "w23,2 16\n",
      "w24,1 9\n",
      "w25,1 2\n",
      "w26,1 5\n",
      "w27,2 15\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import random \n",
    "import gurobipy as gp\n",
    "import time \n",
    "from gurobipy import GRB\n",
    "from gurobipy import quicksum\n",
    "from sklearn.neighbors import DistanceMetric\n",
    "from math import radians\n",
    "import pandas as pd\n",
    "import csv \n",
    "\n",
    "with open('/Users/naman/Desktop/lat_lon.csv') as f:\n",
    "    lat_lon = [[],[]]\n",
    "    reader = csv.reader(f)\n",
    "    for row in reader:\n",
    "        for col in range(2):\n",
    "            lat_lon[col].append(row[col])\n",
    "\n",
    "\n",
    "lat_dataset     = [42.339561, 42.334964, 42.340213]\n",
    "lon_dataset     = [-71.044389, -71.073309, -71.104623]\n",
    "r = random.SystemRandom()\n",
    "\n",
    "list1 = [[0,1,1,0,1,0,1,0,0,1,1,0,1,1,0,1,0,0,0,1,1,0,1,1,0],  \n",
    "         [1,0,0,1,0,1,0,1,1,0,0,1,0,0,1,0,1,1,1,0,0,1,0,0,1]]\n",
    "\n",
    "print(\"Below is a 2 step selection process,\")\n",
    "print(\"1) Select your preference to choose between default (original 28 datapoint set) or choose the number of patients (algorithm will randomly pick patient locations from the multiple locations in the csv file)\")\n",
    "print(\"2) If you have chosen the number of patients, there will be a prompt that will ask you to select a number between 2 and 25\")\n",
    "\n",
    "input_select = int(input(\"Please select your prefrence to choose the number of patients (1) or default (0):\"))\n",
    "while(1):\n",
    "    if(input_select > 1 or input_select < 0):\n",
    "        input_select = int(input(\"Please select your prefrence to choose the number of patients (1) or default (0):\"))\n",
    "    else:\n",
    "        break\n",
    "\n",
    "# Selects between the default preference or user defined number of patients \n",
    "if(input_select == 1):\n",
    "      \n",
    "    p = int(input(\"Please enter the number of patients (between 2 and 25):\"))         #Number of patients\n",
    "    while(1):\n",
    "      if(p > 25 or p < 2):\n",
    "          p = int(input(\"Please enter the number of patients (between 2 and 25):\"))\n",
    "      else: \n",
    "          break\n",
    "                                                                 \n",
    "    for i in range(p):\n",
    "        n = r.randint(0,len(lat_lon[0])-1)\n",
    "        if lat_lon[0][n] not in lat_dataset:\n",
    "            lat_dataset.append(float(lat_lon[0][n]))\n",
    "            lon_dataset.append(float(lat_lon[1][n]))\n",
    "    \n",
    "    cities_df = pd.DataFrame({'lat':lat_dataset, 'lon':lon_dataset})    \n",
    "    print(cities_df)\n",
    "\n",
    "    list2 = [[],[]]\n",
    "    for i in range(len(list1)):\n",
    "        for j in range(p):\n",
    "            list2[i].append(list1[i][j])\n",
    "    a = np.array(list2)\n",
    "\n",
    "elif(input_select == 0):\n",
    "    p = 25\n",
    "    cities_df = pd.DataFrame({\n",
    "    'lat':[\n",
    "           42.339561, \n",
    "           42.334964, 42.340213, \n",
    "           42.365575, 42.364762, 42.358015, 42.349070, 42.352120, 42.334305, 42.33393, 42.292385, 42.314153, 42.324212, \n",
    "           42.278374, 42.278848, 42.275617, 42.238242, 42.381620, 42.353696, 42.367374, 42.362756, 42.358296, 42.349981, \n",
    "           42.345365, 42.337827, 42.337150, 42.289079, 42.322991],  \n",
    "    'lon':[-71.044389,\n",
    "           -71.073309,-71.104623,\n",
    "           -71.059846, -71.068748, -71.067547, -71.061297, -71.084282, -71.078024, -71.029584, -71.04947, -71.087541, -71.113242,\n",
    "           -71.081160, -71.134715, -71.163523, -71.130200, -71.061717, -71.131247, -71.055093, -71.066741, -71.069387, -71.069446,\n",
    "           -71.080479, -71.068844, -71.036429, -71.061430, -71.084816] \n",
    "                          })\n",
    "    a = np.array(list1)\n",
    "\n",
    "l = 2             # Number of labs\n",
    "M = 1000          # Big M\n",
    "s = 2             # Number of shuttles\n",
    "\n",
    "cities_df['lat'] = np.radians(cities_df['lat'])\n",
    "cities_df['lon'] = np.radians(cities_df['lon'])\n",
    "\n",
    "dist1 = DistanceMetric.get_metric('haversine')\n",
    "dist = dist1.pairwise(cities_df [['lat','lon']].to_numpy())*6373  \n",
    "\n",
    "C = [27,27]                                      # capacity of shuttles\n",
    "D = [0]                                          # Depot     \n",
    "L = [i for i in np.arange(1,l+1,1)]              # Set of Labs\n",
    "P = [i for i in np.arange(l+1,l+1+p,1)]          # Set of Patients\n",
    "\n",
    "LP = set(L)|set(P)\n",
    "N  = set(D)|set(L)|set(P)                # set of all the nodes including depot\n",
    "n  = len(N)                              # the number of nodes\n",
    "S  = [i for i in np.arange(1,s+1,1)]     # Set of shuttles\n",
    "\n",
    "m = gp.Model()\n",
    "\n",
    "# Add variables\n",
    "\n",
    "y={}\n",
    "z={}\n",
    "x={}\n",
    "w={}\n",
    "\n",
    "# To record which patient is served by which shuttle: yik = 1 if patient i is served by shuttle k; otherwise,yik = 0.\n",
    "for i in P:\n",
    "    for k in S:\n",
    "        y[(i,k)] = m.addVar(lb=0, vtype=GRB.BINARY, name=\"patient: %d, shuttle: %d\" % (i,k))        \n",
    "\n",
    "# To record which lab is visited by which shuttle: zik = 1 if lab i is visited by shuttle k; otherwise,zik = 0.\n",
    "for i in L:\n",
    "    for k in S:\n",
    "        z[(i,k)] = m.addVar(lb=0, vtype=GRB.BINARY, name=\"lab: %d, shuttle: %d\" % (i,k))\n",
    "\n",
    "# The  primary  decision  variable. node i is immediately followed by node j on shuttle route k, otherwise 0.\n",
    "for i in N:\n",
    "    for j in N:\n",
    "        for k in S:\n",
    "            x[(i,j,k)] = m.addVar(lb=0, vtype=GRB.BINARY, name=\"first_node: %d, next_node: %d, shuttle: %d\" % (i,j,k))\n",
    "\n",
    "# serves the purpose of eliminating any possible sub-tours traveled (sub-tour elimination requirement)\n",
    "for i in N:\n",
    "    for k in S:\n",
    "            w[(i,k)] = m.addVar(lb=0, vtype=GRB.INTEGER, name=\"w%d,%d\" % (i,k))\n",
    "\n",
    "\n",
    "m.update()\n",
    "\n",
    "# Add constraint set 5\n",
    "for i in P:\n",
    "    m.addConstr(quicksum(x[(i,j,k)] for j in N for k in S) == 1,name=\"c1-%d\" % i)\n",
    "    \n",
    "# Add constraint set 6\n",
    "for j in P:\n",
    "    m.addConstr(quicksum(x[(i,j,k)] for i in N for k in S) == 1,name=\"c2-%d\" % j)\n",
    "\n",
    "# Add constraint set 7\n",
    "for j in L:\n",
    "    m.addConstr(quicksum(x[(i,j,k)] for i in N for k in S) >= 1,name=\"c3-%d\" % j)\n",
    "    \n",
    "# Add constraint set 8\n",
    "for i in L:\n",
    "    for k in S:\n",
    "        m.addConstr(quicksum(x[(j,i,k)] for j in N) <= 1,name=\"c4.%d,%d\" % (i,k))\n",
    "\n",
    "# Add constraint set 9\n",
    "for k in S:\n",
    "    m.addConstr(quicksum(x[(i,j,k)] for i in P for j in N) <= C[k-1],name=\"c5-%d\" % k)\n",
    "\n",
    "# Add constraint set 10\n",
    "for i in P:\n",
    "    for k in S:\n",
    "        m.addConstr(quicksum(x[(i,j,k)] for j in N) == y[(i,k)],name=\"c6-%d,%d\" % (i,k))\n",
    "\n",
    "# Add constraint set 11\n",
    "for i in P:\n",
    "    for k in S:\n",
    "        m.addConstr(quicksum(x[(j,i,k)] for j in N) == y[(i,k)],name=\"c7-.%d,%d\" % (i,k))\n",
    "\n",
    "# Add constraint set 12\n",
    "for k in S:\n",
    "    m.addConstr(quicksum(x[(i,j,k)] for i in D for j in P) == 1,name=\"c9-%d\" % k)       \n",
    "\n",
    "# Add constraint set 13\n",
    "for k in S:\n",
    "    m.addConstr(quicksum(x[(i,j,k)] for i in L for j in D) == 1,name=\"c10-%d\" % k)\n",
    "\n",
    "# Add constraint set 14\n",
    "for i in D:\n",
    "    m.addConstr(quicksum(x[(i,j,k)] for j in L for k in S) == 0,name=\"c11-%d\" % i)\n",
    "\n",
    "# Add constraint set 15\n",
    "for j in D:\n",
    "    m.addConstr(quicksum(x[(i,j,k)] for i in P for k in S) == 0,name=\"c12-%d\" % j)\n",
    "           \n",
    "# Add constraint set 16\n",
    "for i in L:\n",
    "    for k in S:\n",
    "        m.addConstr(quicksum(x[(i,j,k)] for j in N) == z[(i,k)],name=\"c8.%d,%d\" % (i,k))\n",
    "\n",
    "# Add constraint set 17\n",
    "for i in L:\n",
    "    for k in S:\n",
    "        m.addConstr(quicksum(x[(j,i,k)] for j in N) == z[(i,k)],name=\"c9.%d,%d\" % (i,k))\n",
    "\n",
    "        \n",
    "# Add constraint set 18\n",
    "for i in N:\n",
    "    for k in S:\n",
    "        m.addConstr(x[(i,i,k)] == 0, name=\"c10.%d,%d\" % (i,k))        \n",
    "\n",
    "# Add constraint set 19\n",
    "for i in D:\n",
    "    for k in S:\n",
    "        m.addConstr(w[(i,k)] == 1, name=\"c11.%d,%d\" % (i,k))\n",
    "\n",
    "# Add constraint set 20\n",
    "for i in LP:\n",
    "    for j in N: \n",
    "        for k in S:\n",
    "            m.addConstr(w[(i,k)]>=w[(j,k)]+1-M*(1-x[(j,i,k)]), name=\"c12.%d,%d,%d\" % (i,j,k))\n",
    "\n",
    "# Add constraint set 21\n",
    "for i in P:\n",
    "    for j in L:\n",
    "        for k in S:\n",
    "            m.addConstr(a[(j-1,i-s-1)]*w[(i,k)] <= w[(j,k)], name=\"c14.%d,%d,%d\" % (i,j,k))\n",
    "            \n",
    "# Add constraint set 22\n",
    "for i in L:\n",
    "    for k in S:\n",
    "        m.addConstr(quicksum(a[(i-1,j-s-1)]*y[(j,k)] for j in P) >= z[(i,k)], name=\"c14.%d,%d\" % (i,k))\n",
    "        \n",
    "# Objective Function\n",
    "\n",
    "m.setObjective(quicksum(dist[(i,j)]*x[(i,j,k)] for i in N for j in N for k in S)+1/M*quicksum(w[(i,k)] for i in N for k in S),GRB.MINIMIZE)\n",
    "\n",
    "m.optimize()\n",
    "\n",
    "for v in m.getVars():\n",
    "    if v.X != 0.0:\n",
    "        print('%s %g' % (v.VarName, v.X))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
